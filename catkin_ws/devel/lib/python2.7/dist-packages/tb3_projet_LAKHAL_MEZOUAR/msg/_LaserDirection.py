# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tb3_projet_LAKHAL_MEZOUAR/LaserDirection.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LaserDirection(genpy.Message):
  _md5sum = "c704f8041ea4ae81e9cc21cd890fee83"
  _type = "tb3_projet_LAKHAL_MEZOUAR/LaserDirection"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 FACE_GAUCHE
float32 FACE_DROITE
float32 GAUCHE_HAUT
float32 GAUCHE_BAS
float32 ARRIERE_DROITE
float32 ARRIERE_GAUCHE
float32 DROITE_HAUT
float32 DROITE_BAS"""
  __slots__ = ['FACE_GAUCHE','FACE_DROITE','GAUCHE_HAUT','GAUCHE_BAS','ARRIERE_DROITE','ARRIERE_GAUCHE','DROITE_HAUT','DROITE_BAS']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       FACE_GAUCHE,FACE_DROITE,GAUCHE_HAUT,GAUCHE_BAS,ARRIERE_DROITE,ARRIERE_GAUCHE,DROITE_HAUT,DROITE_BAS

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LaserDirection, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.FACE_GAUCHE is None:
        self.FACE_GAUCHE = 0.
      if self.FACE_DROITE is None:
        self.FACE_DROITE = 0.
      if self.GAUCHE_HAUT is None:
        self.GAUCHE_HAUT = 0.
      if self.GAUCHE_BAS is None:
        self.GAUCHE_BAS = 0.
      if self.ARRIERE_DROITE is None:
        self.ARRIERE_DROITE = 0.
      if self.ARRIERE_GAUCHE is None:
        self.ARRIERE_GAUCHE = 0.
      if self.DROITE_HAUT is None:
        self.DROITE_HAUT = 0.
      if self.DROITE_BAS is None:
        self.DROITE_BAS = 0.
    else:
      self.FACE_GAUCHE = 0.
      self.FACE_DROITE = 0.
      self.GAUCHE_HAUT = 0.
      self.GAUCHE_BAS = 0.
      self.ARRIERE_DROITE = 0.
      self.ARRIERE_GAUCHE = 0.
      self.DROITE_HAUT = 0.
      self.DROITE_BAS = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8f().pack(_x.FACE_GAUCHE, _x.FACE_DROITE, _x.GAUCHE_HAUT, _x.GAUCHE_BAS, _x.ARRIERE_DROITE, _x.ARRIERE_GAUCHE, _x.DROITE_HAUT, _x.DROITE_BAS))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.FACE_GAUCHE, _x.FACE_DROITE, _x.GAUCHE_HAUT, _x.GAUCHE_BAS, _x.ARRIERE_DROITE, _x.ARRIERE_GAUCHE, _x.DROITE_HAUT, _x.DROITE_BAS,) = _get_struct_8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8f().pack(_x.FACE_GAUCHE, _x.FACE_DROITE, _x.GAUCHE_HAUT, _x.GAUCHE_BAS, _x.ARRIERE_DROITE, _x.ARRIERE_GAUCHE, _x.DROITE_HAUT, _x.DROITE_BAS))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.FACE_GAUCHE, _x.FACE_DROITE, _x.GAUCHE_HAUT, _x.GAUCHE_BAS, _x.ARRIERE_DROITE, _x.ARRIERE_GAUCHE, _x.DROITE_HAUT, _x.DROITE_BAS,) = _get_struct_8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8f = None
def _get_struct_8f():
    global _struct_8f
    if _struct_8f is None:
        _struct_8f = struct.Struct("<8f")
    return _struct_8f
