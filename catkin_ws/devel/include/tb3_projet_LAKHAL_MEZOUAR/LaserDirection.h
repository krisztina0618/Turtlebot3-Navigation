// Generated by gencpp from file tb3_projet_LAKHAL_MEZOUAR/LaserDirection.msg
// DO NOT EDIT!


#ifndef TB3_PROJET_LAKHAL_MEZOUAR_MESSAGE_LASERDIRECTION_H
#define TB3_PROJET_LAKHAL_MEZOUAR_MESSAGE_LASERDIRECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tb3_projet_LAKHAL_MEZOUAR
{
template <class ContainerAllocator>
struct LaserDirection_
{
  typedef LaserDirection_<ContainerAllocator> Type;

  LaserDirection_()
    : FACE_GAUCHE(0.0)
    , FACE_DROITE(0.0)
    , GAUCHE_HAUT(0.0)
    , GAUCHE_BAS(0.0)
    , ARRIERE_DROITE(0.0)
    , ARRIERE_GAUCHE(0.0)
    , DROITE_HAUT(0.0)
    , DROITE_BAS(0.0)  {
    }
  LaserDirection_(const ContainerAllocator& _alloc)
    : FACE_GAUCHE(0.0)
    , FACE_DROITE(0.0)
    , GAUCHE_HAUT(0.0)
    , GAUCHE_BAS(0.0)
    , ARRIERE_DROITE(0.0)
    , ARRIERE_GAUCHE(0.0)
    , DROITE_HAUT(0.0)
    , DROITE_BAS(0.0)  {
  (void)_alloc;
    }



   typedef float _FACE_GAUCHE_type;
  _FACE_GAUCHE_type FACE_GAUCHE;

   typedef float _FACE_DROITE_type;
  _FACE_DROITE_type FACE_DROITE;

   typedef float _GAUCHE_HAUT_type;
  _GAUCHE_HAUT_type GAUCHE_HAUT;

   typedef float _GAUCHE_BAS_type;
  _GAUCHE_BAS_type GAUCHE_BAS;

   typedef float _ARRIERE_DROITE_type;
  _ARRIERE_DROITE_type ARRIERE_DROITE;

   typedef float _ARRIERE_GAUCHE_type;
  _ARRIERE_GAUCHE_type ARRIERE_GAUCHE;

   typedef float _DROITE_HAUT_type;
  _DROITE_HAUT_type DROITE_HAUT;

   typedef float _DROITE_BAS_type;
  _DROITE_BAS_type DROITE_BAS;





  typedef boost::shared_ptr< ::tb3_projet_LAKHAL_MEZOUAR::LaserDirection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tb3_projet_LAKHAL_MEZOUAR::LaserDirection_<ContainerAllocator> const> ConstPtr;

}; // struct LaserDirection_

typedef ::tb3_projet_LAKHAL_MEZOUAR::LaserDirection_<std::allocator<void> > LaserDirection;

typedef boost::shared_ptr< ::tb3_projet_LAKHAL_MEZOUAR::LaserDirection > LaserDirectionPtr;
typedef boost::shared_ptr< ::tb3_projet_LAKHAL_MEZOUAR::LaserDirection const> LaserDirectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tb3_projet_LAKHAL_MEZOUAR::LaserDirection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tb3_projet_LAKHAL_MEZOUAR::LaserDirection_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tb3_projet_LAKHAL_MEZOUAR

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'tb3_projet_LAKHAL_MEZOUAR': ['/home/user/catkin_ws/src/tb3_projet_LAKHAL_MEZOUAR/msg', '/home/user/catkin_ws/devel/share/tb3_projet_LAKHAL_MEZOUAR/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tb3_projet_LAKHAL_MEZOUAR::LaserDirection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tb3_projet_LAKHAL_MEZOUAR::LaserDirection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tb3_projet_LAKHAL_MEZOUAR::LaserDirection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tb3_projet_LAKHAL_MEZOUAR::LaserDirection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb3_projet_LAKHAL_MEZOUAR::LaserDirection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tb3_projet_LAKHAL_MEZOUAR::LaserDirection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tb3_projet_LAKHAL_MEZOUAR::LaserDirection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c704f8041ea4ae81e9cc21cd890fee83";
  }

  static const char* value(const ::tb3_projet_LAKHAL_MEZOUAR::LaserDirection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc704f8041ea4ae81ULL;
  static const uint64_t static_value2 = 0xe9cc21cd890fee83ULL;
};

template<class ContainerAllocator>
struct DataType< ::tb3_projet_LAKHAL_MEZOUAR::LaserDirection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tb3_projet_LAKHAL_MEZOUAR/LaserDirection";
  }

  static const char* value(const ::tb3_projet_LAKHAL_MEZOUAR::LaserDirection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tb3_projet_LAKHAL_MEZOUAR::LaserDirection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 FACE_GAUCHE\n\
float32 FACE_DROITE\n\
float32 GAUCHE_HAUT\n\
float32 GAUCHE_BAS\n\
float32 ARRIERE_DROITE\n\
float32 ARRIERE_GAUCHE\n\
float32 DROITE_HAUT\n\
float32 DROITE_BAS\n\
";
  }

  static const char* value(const ::tb3_projet_LAKHAL_MEZOUAR::LaserDirection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tb3_projet_LAKHAL_MEZOUAR::LaserDirection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.FACE_GAUCHE);
      stream.next(m.FACE_DROITE);
      stream.next(m.GAUCHE_HAUT);
      stream.next(m.GAUCHE_BAS);
      stream.next(m.ARRIERE_DROITE);
      stream.next(m.ARRIERE_GAUCHE);
      stream.next(m.DROITE_HAUT);
      stream.next(m.DROITE_BAS);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaserDirection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tb3_projet_LAKHAL_MEZOUAR::LaserDirection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tb3_projet_LAKHAL_MEZOUAR::LaserDirection_<ContainerAllocator>& v)
  {
    s << indent << "FACE_GAUCHE: ";
    Printer<float>::stream(s, indent + "  ", v.FACE_GAUCHE);
    s << indent << "FACE_DROITE: ";
    Printer<float>::stream(s, indent + "  ", v.FACE_DROITE);
    s << indent << "GAUCHE_HAUT: ";
    Printer<float>::stream(s, indent + "  ", v.GAUCHE_HAUT);
    s << indent << "GAUCHE_BAS: ";
    Printer<float>::stream(s, indent + "  ", v.GAUCHE_BAS);
    s << indent << "ARRIERE_DROITE: ";
    Printer<float>::stream(s, indent + "  ", v.ARRIERE_DROITE);
    s << indent << "ARRIERE_GAUCHE: ";
    Printer<float>::stream(s, indent + "  ", v.ARRIERE_GAUCHE);
    s << indent << "DROITE_HAUT: ";
    Printer<float>::stream(s, indent + "  ", v.DROITE_HAUT);
    s << indent << "DROITE_BAS: ";
    Printer<float>::stream(s, indent + "  ", v.DROITE_BAS);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TB3_PROJET_LAKHAL_MEZOUAR_MESSAGE_LASERDIRECTION_H
